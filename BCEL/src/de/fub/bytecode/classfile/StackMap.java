package de.fub.bytecode.classfile;


import  de.fub.bytecode.Constants;
import  java.io.*;

/**
 * This class is derived from <em>Attribute</em> and models the state
 * of the local variable and operand stacks at some or all of the instructions
 * within a method. This is generated by the J2ME
 * preverifier and is used for runtime verification as well as exact
 * garbage collection in KVM, the reference J2ME VM implementation.
 *
 * @author  Doug Simon
 * @see     Code
 * @see     StackMapEntry
 */
public final class StackMap extends Attribute {
  private int          number_of_entries;
  private StackMapEntry[] entries;

  /*
   * Initialize from another object. Note that both objects use the same
   * references (shallow copy). Use clone() for a physical copy.
   */
  public StackMap(StackMap c) {
    this(c.getNameIndex(), c.getLength(), c.getEntries(),
	 c.getConstantPool());
  }

  /*
   * @param name_index Index of name
   * @param length Content length in bytes
   * @param entries Table of line/numbers pairs
   * @param constant_pool Array of constants
   */
  public StackMap(int name_index, int length,
			 StackMapEntry[] entries,
			 ConstantPool constant_pool)
  {
    super(Constants.ATTR_STACKMAP, name_index, length, constant_pool);
    setEntries(entries);
  }
   
  /**
   * Construct object from file stream.
   * @param name_index Index of name
   * @param length Content length in bytes
   * @param file Input stream
   * @throw IOException
   * @param constant_pool Array of constants
   */
  StackMap(int name_index, int length, DataInputStream file,
		  ConstantPool constant_pool) throws IOException
  {
    this(name_index, length, (StackMapEntry[])null, constant_pool);
    number_of_entries = (file.readUnsignedShort());
    entries = new StackMapEntry[number_of_entries];

    for(int i=0; i < number_of_entries; i++)
      entries[i] = new StackMapEntry(file);
  }    
  /**
   * Called by objects that are traversing the nodes of the tree implicitely
   * defined by the contents of a Java class. I.e., the hierarchy of methods,
   * fields, attributes, etc. spawns a tree of objects.
   *
   * @param v Visitor object
   */
  public void accept(Visitor v) {
    v.visitStackMap(this);
  }    
  /**
   * Dump line number table attribute to file stream in binary format.
   *
   * @param file Output file stream
   * @throw IOException
   */ 
  public final void dump(DataOutputStream file) throws IOException
  {
    super.dump(file);
    file.writeShort(number_of_entries);
    for(int i=0; i < number_of_entries; i++)
      entries[i].dump(file);
  }    
   
  /**
   * @return Array of (pc offset, line number) pairs.
   */  
  public final StackMapEntry[] getEntries() { return entries; }    

  /**
   * @param entries.
   */
  public final void setEntries(StackMapEntry[] entries) {
    this.entries = entries;

    number_of_entries = (entries == null)? 0 :
      entries.length;
  }

  /**
   * @return String representation.
   */ 
  public final String toString() {
    StringBuffer buf  = new StringBuffer("StackMap:\n");

    for(int i=0; i < number_of_entries; i++)
		{
      buf.append(entries[i].toString());
			buf.append("\n");
    }

    return buf.toString();    
  }

  /**
   * @return deep copy of this attribute
   */
  public Attribute copy(ConstantPool constant_pool) {
    StackMap c = (StackMap)clone();

    c.entries = new StackMapEntry[number_of_entries];
    for(int i=0; i < number_of_entries; i++)
      c.entries[i] = entries[i].copy();

    c.constant_pool = constant_pool;
    return c;
  }

  public final int getStackMapLength() { return number_of_entries; }
}
