TOP=../..
include $(TOP)/build/Makefile.inc

JAVA          = java
JAVAC         = javac
JAR           = jar

JAVAFILES =  $(shell find src -name "*.java"|grep -v SCCS)
 
CLASSFILES = $(subst src,classes,$(JAVAFILES:java=class))

VMDIR = VmWin

# $< is dependency
# $@ is target


$(CLASSFILES): classes/%.class : src/%.java
	@echo $< >> .filelist

eraselists: 
	@rm -f .filelist 

compilefiles:
	@if [ '!' -d classes ]; then rm -rf classes; mkdir classes; fi;
	@if [ -f .filelist ]; then \
		echo $(JAVAC) `cat .filelist`; \
		$(JAVAC) -d classes -classpath classes:src \
	              `cat .filelist`; \
	fi

ifndef PLATFORM
PLATFORM=solaris
endif

ifeq ($(PLATFORM), solaris)
VMDIR = VmUnix
endif

ifeq ($(PLATFORM), linux)
VMDIR = VmUnix
all:    unix
endif

ifeq ($(PLATFORM), win32)
all:    windows
endif

ifeq ($(PLATFORM), solaris) 
all:    unix
endif


unix:	 nativeFunctionTableUnix.c ROMjavaUnix.c

windows: nativeFunctionTableWin.c ROMjavaWin.c

tools: eraselists $(CLASSFILES) compilefiles 

ifneq ($(JCC_PASS_TWO), true)

ROMjava%.c: classes%.zip tools
	@cp -f src/*.properties classes
	@$(MAKE) $@ JCC_PASS_TWO=true

nativeFunctionTable%.c: classes%.zip tools
	@cp -f src/*.properties classes
	@$(MAKE) $@ JCC_PASS_TWO=true

nativeRelocation%.c: classes%.zip tools
	@cp -f src/*.properties classes
	@$(MAKE) $@ JCC_PASS_TWO=true

#Classes that aren't currently used for a particular platform
NON_Unix_CLASSES =

NON_Win_CLASSES =

classes%.zip: classes.zip
	@echo ... $@
	@mkdir tmpjar
	@cp classes.zip $@
	@echo $($(patsubst classes%.zip,NON_%_CLASSES,$@))		
	@(cd tmpjar; $(JAR) xf ../$@; \
	 rm -rf $($(patsubst classes%.zip,NON_%_CLASSES,$@)); \
	 chmod -R a+wrx .)
	@rm $@
	@$(JAR) cfM0 $@ -C tmpjar .
	@rm -rf tmpjar
	
classes.zip: $(TOP)/api/classes.zip
	@echo ... $@
	@cmp -s $< $@ || (echo cp $< $@ ; cp $< $@)


$(TOP)/api/classes.zip: .FORCE
	@(cd $(TOP)/api; $(MAKE) classes.zip)

else

# One of the possible architectures when creating ROMjava*.c
UnixArch = KVM
WinArch =  KVM

ROMjava%.c: classes%.zip 
	@echo ... $@
	@$(JAVA) -classpath classes JavaCodeCompact \
	         -nq -arch $($(patsubst classes%.zip,%Arch,$<)) -o $@ $<

nativeFunctionTable%.c: classes%.zip
	@echo ... $@
	@cp -f src/*.properties classes
	@$(JAVA) -classpath classes JavaCodeCompact \
		 -nq -arch KVM_Native -o $@ $<

nativeRelocation%.c: classes%.zip
	@echo ... $@
	@$(JAVA) -classpath classes JavaCodeCompact \
	         -imageAttribute relocating \
	         -nq -arch $($(patsubst classes%.zip,%Arch,$<)) -o $@ $<

endif


clean:
	@rm -rf .filelist
	@rm -rf classes tmpjar
	@rm -rf *.zip
	@rm -rf ROMjava*
	@rm -rf nativeFunctionTable*
	@rm -rf nativeRelocation*
	@rm -rf *~ */*~ */*/*~
	@rm -rf *# */*# */*/*#


# I have no idea why this is necessary, but otherwise gnumake deletes
# these as intermediate files
.SECONDARY:	classesUnix.zip classesWin.zip

.FORCE:
